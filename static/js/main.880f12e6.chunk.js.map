{"version":3,"sources":["DimensionInput.js","ruler.js","VertexLabels.js","exportSvg.js","trig.js","PatternPolyline.js","makePattern.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["DimensionInput","props","handleChange","bind","event","this","onValueChange","Form","Group","as","Row","controlId","id","Col","Label","className","label","md","InputGroup","Control","type","placeholder","value","val","onChange","name","Append","Text","React","Component","Ruler","x1","y1","x2","y2","stroke","fill","strokeWidth","x","y","fontSize","fontFamily","VertexLabels","points","slice","length","map","point","key","cx","cy","r","cloneSvg","svg","document","getElementById","cloneNode","setAttribute","css","call","head","querySelectorAll","filter","el","test","innerText","join","style","createElement","innerHTML","insertBefore","firstChild","getX","degreeRadian","hypotenuse","Math","cos","getY","sin","getAngleA","a","b","c","numerator","denominator","acos","PatternPolyline","MaskPattern","setDimensions","earToNoseRiseAngle","PI","tabWidth","showLabels","fileDownload","earTop","earBottom","earHeight","totalAngle","bridgeToTip","earToBridge","earToNose","bridgePoint","nosePoint","chinPoint","noseToChin","earBottomToChinX","earBottomToChinY","earBottomToChinDistance","sqrt","lowerAngle","chinToThroat","earToThroat","throatPoint","tabTop","tabBottom","setEarTop","setEarBottom","setBridgePoint","setNoseTipPoint","setChinPoint","setThroatPoint","setTabPoints","values","forEach","element","push","makePoints","polylinePoints","makePolylinePoints","tabPoints","makeTabPoints","tabPolylinePoints","Button","onClick","download","width","height","viewBox","transform","MyForm","state","handleInputChange","target","setState","parseInt","fluid","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.880f12e6.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nexport class DimensionInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        return (\n            <Form.Group as={Row} controlId={this.props.id}>\n                <Col>\n                    <Form.Label\n                        className='labelText'>{this.props.label}\n                    </Form.Label>\n                </Col>\n                <Col md='4'>\n                <InputGroup>\n                    <Form.Control\n                        type=\"number\"\n                        placeholder={this.props.label}\n                        value={this.props.val}\n                        onChange={this.handleChange}\n                        name={this.props.id}\n                    >\n                    </Form.Control>\n                    <InputGroup.Append>\n                        <InputGroup.Text>mm</InputGroup.Text>\n                    </InputGroup.Append>\n                    </InputGroup>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n","import React from 'react';\n\nexport class Ruler extends React.Component {\n    render() {\n        return (\n            <g>\n                <line\n                    x1='0' y1='-50'\n                    x2='10' y2='-50'\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px'></line>\n                <text x='0' y='-45'\n                    fontSize='4px'\n                    fontFamily='sans-serif'\n                >This line should be 1 cm long when printed</text>\n            </g>\n        )\n    }\n};","import React from 'react';\n\nexport class VertexLabels extends React.Component {\n    render() {\n        return (\n            <>\n                {this.props.points.slice(0, this.props.points.length - 1).map(point => <g\n                    key={point.label}>\n                    <circle\n                        cx={point.x} cy={point.y}\n                        r='.5'\n                        stroke='black'\n                        >\n\n                    </circle>\n                    <text\n                        x={point.x + 5}\n                        y={point.y}\n                        fontSize='4px'\n                        fontFamily='sans-serif'\n                    >\n                        {point.label}\n                    </text>\n                </g>)\n                }\n            </>)\n    }\n}\n","\n\n        // patternToSvg(function(datauri) {\n        //     var a = document.createElement('a');\n        //     a.download = 'screenshot.png';\n        //     a.target = '_self';\n        //     a.href = datauri;\n        //     document.body.appendChild(a);\n        //     a.click();\n        //     a.parentNode.removeChild(a);\n        //   });\n\n/**\n * Convert an SVG datauri into a PNG datauri.\n * @param {string} data SVG datauri.\n * @param {number} width Image width.\n * @param {number} height Image height.\n * @param {!Function} callback Callback.\n */\nfunction svgToPng_(data, width, height, callback) {\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  var img = new Image();\n\n  var pixelDensity = 5;\n  canvas.width = width * pixelDensity;\n  canvas.height = height * pixelDensity;\n  img.onload = function () {\n    context.drawImage(\n      img, 0, 0)//, 0, 0, width, height, -50, -50, canvas.width, canvas.height);\n    try {\n      var dataUri = canvas.toDataURL('image/png');\n      callback(dataUri);\n    } catch (err) {\n      console.warn('Error converting the workspace svg to a png');\n      callback('');\n    }\n  };\n  img.src = data;\n}\n\n/**\n* Create an SVG of the blocks on the workspace.\n* @param {!Function} callback Callback.\n*/\nexport function patternToSvg(callback) {\n  const width = 250;\n  const height = 250;\n\n  const svg = cloneSvg();\n  var svgAsXML = (new XMLSerializer()).serializeToString(svg);\n  console.log(svgAsXML);\n  svgAsXML = svgAsXML.replace(/&nbsp/g, '&#160');\n  var data = 'data:image/svg+xml,' + encodeURIComponent(svgAsXML);\n\n\n  svgToPng_(data, width, height, callback);\n}\n\nexport function cloneSvg() {\n\n  var pattern = document.getElementById('maskPattern');\n  var clone = pattern.cloneNode(true);\n  var svg = clone;\n\n  svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svg.setAttribute(\"style\", 'background-color: transparent');\n\n  var css = [].slice.call(document.head.querySelectorAll('style'))\n    .filter(function (el) {\n      return /\\.patternSvg/.test(el.innerText);\n    })\n    .map(function (el) {\n      return el.innerText;\n    })\n    .join('\\n');\n  var style = document.createElement('style');\n  style.innerHTML = css;\n  svg.insertBefore(style, svg.firstChild);\n\n  return svg;\n}\n","export function degreeToRadian(degreeAngle) {\n    return degreeAngle * Math.PI / 180;\n}\n\nexport function radianToDegree(radianAngle) {\n    return 180 * radianAngle / Math.PI;\n}\n\nexport function getX(degreeRadian, hypotenuse) {\n    return Math.cos(degreeRadian) * hypotenuse;\n}\n\nexport function getY(degreeRadian, hypotenuse) {\n    return Math.sin(degreeRadian) * hypotenuse;\n}\n\nexport function getAngleA(a, b, c) {\n    const numerator = b*b + c*c - a*a\n    const denominator = 2 * b * c;\n    return Math.acos(numerator / denominator);\n}","import React from 'react';\n\nexport class PatternPolyline extends React.Component {\n    render() {\n        return (\n            <>\n                <polyline\n                    points={this.props.points}\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px'\n                ></polyline>\n\n            </>)\n    }\n}\n\n","import React from 'react';\nimport fileDownload from 'svg-file-downloader';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Ruler } from './ruler';\nimport { VertexLabels } from './VertexLabels';\nimport { cloneSvg } from './exportSvg';\nimport { degreeToRadian, getX, getY, getAngleA } from './trig';\nimport { PatternPolyline } from './PatternPolyline';\n\n\nexport class MaskPattern extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setDimensions(props);\n\n        this.earToNoseRiseAngle = degreeToRadian(5);\n        this.tabWidth = 25;\n        this.showLabels = true;\n\n        // The mask doesn't actually go all the way to the edge of the nostril before \n        // turning up toward the bridge of the nose. It goes to about a finger width\n        // from the nostril. Closing the remaining gap is done by pinching the nose bridge\n        // when the wire is installed.\n    }\n    download() {\n        fileDownload(\n            cloneSvg(),\n            false,\n            'testfile.svg')\n    }\n\n    setEarTop() {\n        this.earTop = {\n            x: 0,\n            y: 0,\n            label: \"Ear top\"\n        };\n    }\n\n    setEarBottom() {\n        this.earBottom = {\n            x: 0,\n            y: this.props.earHeight,\n            label: \"Ear bottom\"\n        };\n    }\n\n    setBridgePoint() {\n        const innerAngle = getAngleA(\n            this.props.bridgeToTip,\n            this.props.earToBridge,\n            this.props.earToNose);\n        const totalAngle = innerAngle + this.earToNoseRiseAngle;\n\n        this.bridgePoint = {\n            x: getX(totalAngle, this.props.earToBridge),\n            y: -getY(totalAngle, this.props.earToBridge),\n            label: \"Bridge of nose\"\n        }\n    }\n\n    setNoseTipPoint() {\n        this.nosePoint = {\n            x: getX(this.earToNoseRiseAngle, this.props.earToNose),\n            y: -getY(this.earToNoseRiseAngle, this.props.earToNose),\n            label: \"Tip of nose\"\n        }\n    }\n\n    setChinPoint() {\n        this.chinPoint = {\n            x: this.nosePoint.x,\n            y: this.nosePoint.y + this.props.noseToChin,\n            label: \"Point of chin\"\n        }\n    }\n\n    setThroatPoint() {\n        const earBottomToChinX = this.chinPoint.x - this.earBottom.x;\n        const earBottomToChinY = this.chinPoint.y - this.earBottom.y;\n        const earBottomToChinDistance =\n            Math.sqrt(\n                earBottomToChinX * earBottomToChinX +\n                earBottomToChinY * earBottomToChinY);\n\n        const lowerAngle = getAngleA(\n            this.props.chinToThroat,\n            earBottomToChinDistance,\n            this.props.earToThroat);\n\n        const upperAngle = getAngleA(\n            earBottomToChinY,\n            earBottomToChinX,\n            earBottomToChinDistance);\n\n        const totalAngle = upperAngle + lowerAngle;\n\n        const x = this.earBottom.x + getX(totalAngle, this.props.earToThroat);\n        const y = this.earBottom.y + getY(totalAngle, this.props.earToThroat);\n\n        this.throatPoint = {\n            x: x,\n            y: y,\n            label: \"Throat\"\n        }\n    }\n\n    setTabPoints() {\n        this.tabTop = {\n            x: -this.tabWidth,\n            y: this.earTop.y,\n            label: \"Tab top\"\n        }\n        this.tabBottom = {\n            x: -this.tabWidth,\n            y: this.earBottom.y,\n            label: \"Tab bottom\"\n        }\n    }\n    setDimensions() {\n        this.setEarTop();\n        this.setEarBottom();\n        this.setBridgePoint();\n        this.setNoseTipPoint();\n        this.setChinPoint();\n        this.setThroatPoint();\n        this.setTabPoints()\n    }\n\n    makePoints() {\n        let points = [\n            this.earTop,\n            this.bridgePoint,\n            this.nosePoint,\n            this.chinPoint,\n            this.throatPoint,\n            this.earBottom,\n            this.earTop\n        ];\n        return points;\n    }\n\n    makeTabPoints() {\n        let points = [\n            this.earTop,\n            this.tabTop,\n            this.tabBottom,\n            this.earBottom\n        ]\n        return points;\n    }\n\n    makePolylinePoints(points) {\n        let values = [];\n        points.forEach(element => values.push(element.x, element.y));\n        return values;\n    }\n\n    render() {\n        this.setDimensions(this.props);\n        const points = this.makePoints()\n        const polylinePoints = this.makePolylinePoints(points);\n\n        const tabPoints = this.makeTabPoints();\n        const tabPolylinePoints = this.makePolylinePoints(tabPoints);\n        return (\n            <>\n                <Col>\n                    <Row>\n                        <Button onClick={this.download}>Download pattern</Button>\n                    </Row>\n                    <Row>\n                        <svg\n                            width='300mm'\n                            height='300mm'\n                            viewBox='-50 -75 250 225'\n                            id='maskPattern'>\n                            <Ruler></Ruler>\n                            <g transform='translate(0, 0)'>\n                                <PatternPolyline points={polylinePoints}>\n                                </PatternPolyline>\n                                <PatternPolyline points={tabPolylinePoints}>\n                                </PatternPolyline>\n                                {this.showLabels &&\n                                    <VertexLabels points={points}></VertexLabels>}\n                            </g>\n                        </svg>\n                    </Row>\n                </Col>\n            </>)\n    }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { DimensionInput } from './DimensionInput';\nimport { MaskPattern } from './makePattern';\n\nclass MyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            noseToChin: 95,\n            earHeight: 45,\n            earToNose: 115,\n            earToThroat: 90,\n            bridgeToTip: 30,\n            earToBridge: 110,\n            chinToThroat: 55\n        }\n        this.handleInputChange =\n            this.handleInputChange.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            [name]: parseInt(target.value)\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <Row fluid=\"true\">\n                    <Form>\n                        <Row>\n                        <Col>\n                            <DimensionInput\n                                id=\"earHeight\"\n                                label=\"Ear height\"\n                                val={this.state.earHeight}\n                                onValueChange={this.handleInputChange}>\n                            </DimensionInput>\n\n                            <DimensionInput\n                                id=\"noseToChin\"\n                                label=\"Nose to chin with mouth open to talk\"\n                                val={this.state.noseToChin}\n                                onValueChange={this.handleInputChange}>\n                            </DimensionInput>\n\n                            <DimensionInput\n                                id=\"earToNose\"\n                                label=\"Ear top to nose tip\"\n                                val={this.state.earToNose}\n                                onValueChange={this.handleInputChange}>\n                            </DimensionInput>\n                        </Col>\n                        <Col>\n                            <DimensionInput\n                                id=\"earToThroat\"\n                                label=\"Ear bottom to throat\"\n                                val={this.state.earToThroat}\n                                onValueChange={this.handleInputChange}>\n                            </DimensionInput>\n                            <DimensionInput\n                                id=\"bridgeToTip\"\n                                label=\"Nose bridge to nose tip\"\n                                val={this.state.bridgeToTip}\n                                onValueChange={this.handleInputChange}>\n                            </DimensionInput>\n                            <DimensionInput\n                                id=\"earToBridge\"\n                                label=\"Ear top to nose bridge\"\n                                val={this.state.earToBridge}\n                                onValueChange={this.handleInputChange}>\n                            </DimensionInput>\n                            <DimensionInput\n                                id=\"chinToThroat\"\n                                label=\"Chin to throat\"\n                                val={this.state.chinToThroat}\n                                onValueChange={this.handleInputChange}>\n                            </DimensionInput>\n                        </Col>\n                        </Row>\n                    </Form>\n                </Row>\n                <Row>\n                    <MaskPattern\n                        noseToChin={this.state.noseToChin}\n                        earHeight={this.state.earHeight}\n                        earToNose={this.state.earToNose}\n                        earToThroat={this.state.earToThroat}\n                        bridgeToTip={this.state.bridgeToTip}\n                        earToBridge={this.state.earToBridge}\n                        chinToThroat={this.state.chinToThroat}\n                    >\n                    </MaskPattern>\n                </Row>\n            </>\n        )\n    }\n};\nexport default MyForm;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\nimport MyForm from './Form.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <MyForm></MyForm>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}