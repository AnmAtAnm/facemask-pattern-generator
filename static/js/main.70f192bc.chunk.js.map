{"version":3,"sources":["face_points_lines_labels2.jpg","face_points_labels_2.jpg","face_points_lines2.jpg","face_mask_earloop.jpg","face_mask_laces.jpg","DimensionInput.js","ruler.js","VertexLabels.js","exportSvg.js","trig.js","PatternPolyline.js","makePattern.js","Form.js","SewingInstructions.js","MeasurementFigure.js","ItemDescription.js","MeasurementInstructions.js","Introduction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DimensionInput","props","handleChange","bind","event","this","onValueChange","Form","Group","as","Row","controlId","id","Col","Label","className","size","label","md","InputGroup","Control","type","placeholder","value","val","onChange","name","Append","Text","React","Component","Ruler","x1","y1","x2","y2","stroke","fill","strokeWidth","x","y","fontSize","fontFamily","VertexLabels","points","map","point","key","cx","cy","r","toFixed","cloneSvg","svg","document","getElementById","cloneNode","setAttribute","css","slice","call","head","querySelectorAll","filter","el","test","innerText","join","style","createElement","innerHTML","insertBefore","firstChild","degreeToRadian","degreeAngle","Math","PI","getX","degreeRadian","hypotenuse","cos","getY","sin","getAngleA","a","b","c","numerator","denominator","acos","PatternPolyline","MaskPattern","setDimensions","earToNoseRiseAngle","noseChinAngle","tabWidth","showLabels","fileDownload","earTop","earBottom","earHeight","totalAngle","bridgeToTip","earToBridge","earToNose","bridgePoint","nosePoint","chinPoint","noseToChin","earBottomToChinX","earBottomToChinY","earBottomToChinDistance","sqrt","lowerAngle","chinToThroat","earToThroat","throatPoint","tabTop","tabBottom","setEarTop","setEarBottom","setBridgePoint","setNoseTipPoint","setChinPoint","setThroatPoint","setTabPoints","values","forEach","element","push","makePoints","polylinePoints","makePolylinePoints","tabPoints","makeTabPoints","tabPolylinePoints","Button","onClick","download","fluid","width","height","viewBox","transform","getLabelPoints","MyForm","state","handleInputChange","target","setState","parseInt","src","face_points_lines_labels2","SewingInstructions","MeasurementFigure","ListGroup","Item","justify","Figure","Image","imgSrc","Caption","caption","ItemDescription","horizontal","itemName","description","MeasurementInstructions","Container","variant","face_points_labels_2","face_points_lines2","Introduction","face_mask_earloop","alt","face_mask_laces","href","App","Tabs","defaultActiveKey","transition","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70f192bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face_points_lines_labels2.84efa164.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_points_labels_2.e8c859cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_points_lines2.6b16100e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_mask_earloop.7ac6b580.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_mask_laces.e6748e96.jpg\";","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nexport class DimensionInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        return (\n            <Form.Group as={Row} controlId={this.props.id}>\n                <Col>\n                    <Form.Label\n                        className='labelText' size='sm'>{this.props.label}\n                    </Form.Label>\n                </Col>\n                <Col md='5'>\n                    <InputGroup size='sm'>\n                        <Form.Control\n                            type=\"number\"\n                            placeholder={this.props.label}\n                            value={this.props.val}\n                            onChange={this.handleChange}\n                            name={this.props.id}\n                        >\n                        </Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text>mm</InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n","import React from 'react';\n\nexport class Ruler extends React.Component {\n    render() {\n        return (\n            <g>\n                <line\n                    x1='0' y1='-50'\n                    x2='50' y2='-50'\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px'></line>\n                <text x='0' y='-45'\n                    fontSize='4px'\n                    fontFamily='sans-serif'\n                >This line should be 5 cm long when printed</text>\n            </g>\n        )\n    }\n};","import React from 'react';\n\nexport class VertexLabels extends React.Component {\n    render() {\n        return (\n            <>\n                {this.props.points.map(point => <g\n                    key={point.label}>\n                    <circle\n                        cx={point.x} cy={point.y}\n                        r='.5'\n                        stroke='black'\n                        >\n\n                    </circle>\n                    <text\n                        x={point.x + 5}\n                        y={point.y}\n                        fontSize='4px'\n                        fontFamily='sans-serif'\n                    >\n                        {point.label}\n                    </text>\n                    <text\n                        x={point.x + 5}\n                        y={point.y + 5}\n                        fontSize='4px'\n                        fontFamily='sans-serif'\n                    >\n                        ({point.x.toFixed()}, {point.y.toFixed()})\n                    </text>\n                </g>)\n                }\n            </>)\n    }\n}\n","\n\n        // patternToSvg(function(datauri) {\n        //     var a = document.createElement('a');\n        //     a.download = 'screenshot.png';\n        //     a.target = '_self';\n        //     a.href = datauri;\n        //     document.body.appendChild(a);\n        //     a.click();\n        //     a.parentNode.removeChild(a);\n        //   });\n\n/**\n * Convert an SVG datauri into a PNG datauri.\n * @param {string} data SVG datauri.\n * @param {number} width Image width.\n * @param {number} height Image height.\n * @param {!Function} callback Callback.\n */\nfunction svgToPng_(data, width, height, callback) {\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  var img = new Image();\n\n  var pixelDensity = 5;\n  canvas.width = width * pixelDensity;\n  canvas.height = height * pixelDensity;\n  img.onload = function () {\n    context.drawImage(\n      img, 0, 0)//, 0, 0, width, height, -50, -50, canvas.width, canvas.height);\n    try {\n      var dataUri = canvas.toDataURL('image/png');\n      callback(dataUri);\n    } catch (err) {\n      console.warn('Error converting the workspace svg to a png');\n      callback('');\n    }\n  };\n  img.src = data;\n}\n\n/**\n* Create an SVG of the blocks on the workspace.\n* @param {!Function} callback Callback.\n*/\nexport function patternToSvg(callback) {\n  const width = 250;\n  const height = 250;\n\n  const svg = cloneSvg();\n  var svgAsXML = (new XMLSerializer()).serializeToString(svg);\n  console.log(svgAsXML);\n  svgAsXML = svgAsXML.replace(/&nbsp/g, '&#160');\n  var data = 'data:image/svg+xml,' + encodeURIComponent(svgAsXML);\n\n\n  svgToPng_(data, width, height, callback);\n}\n\nexport function cloneSvg() {\n\n  var pattern = document.getElementById('maskPattern');\n  var clone = pattern.cloneNode(true);\n  var svg = clone;\n\n  svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svg.setAttribute(\"style\", 'background-color: transparent');\n\n  var css = [].slice.call(document.head.querySelectorAll('style'))\n    .filter(function (el) {\n      return /\\.patternSvg/.test(el.innerText);\n    })\n    .map(function (el) {\n      return el.innerText;\n    })\n    .join('\\n');\n  var style = document.createElement('style');\n  style.innerHTML = css;\n  svg.insertBefore(style, svg.firstChild);\n\n  return svg;\n}\n","export function degreeToRadian(degreeAngle) {\n    return degreeAngle * Math.PI / 180;\n}\n\nexport function radianToDegree(radianAngle) {\n    return 180 * radianAngle / Math.PI;\n}\n\nexport function getX(degreeRadian, hypotenuse) {\n    return Math.cos(degreeRadian) * hypotenuse;\n}\n\nexport function getY(degreeRadian, hypotenuse) {\n    return Math.sin(degreeRadian) * hypotenuse;\n}\n\nexport function getAngleA(a, b, c) {\n    const numerator = b*b + c*c - a*a\n    const denominator = 2 * b * c;\n    return Math.acos(numerator / denominator);\n}","import React from 'react';\n\nexport class PatternPolyline extends React.Component {\n    render() {\n        return (\n            <>\n                <polyline\n                    points={this.props.points}\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px'\n                ></polyline>\n\n            </>)\n    }\n}\n\n","import React from 'react';\nimport fileDownload from 'svg-file-downloader';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Ruler } from './ruler';\nimport { VertexLabels } from './VertexLabels';\nimport { cloneSvg } from './exportSvg';\nimport { degreeToRadian, getX, getY, getAngleA } from './trig';\nimport { PatternPolyline } from './PatternPolyline';\n\n\nexport class MaskPattern extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setDimensions(props);\n\n        this.earToNoseRiseAngle = degreeToRadian(5);\n        this.noseChinAngle = degreeToRadian(85);\n        this.tabWidth = 25;\n        this.showLabels = true;\n    }\n    download() {\n        fileDownload(\n            cloneSvg(),\n            false,\n            'maskPattern.svg')\n    }\n\n    setEarTop() {\n        this.earTop = {\n            x: 0,\n            y: 0,\n            label: \"Ear top\"\n        };\n    }\n\n    setEarBottom() {\n        this.earBottom = {\n            x: 0,\n            y: this.props.earHeight,\n            label: \"Ear bottom\"\n        };\n    }\n\n    setBridgePoint() {\n        const innerAngle = getAngleA(\n            this.props.bridgeToTip,\n            this.props.earToBridge,\n            this.props.earToNose);\n        const totalAngle = innerAngle + this.earToNoseRiseAngle;\n\n        this.bridgePoint = {\n            x: getX(totalAngle, this.props.earToBridge),\n            y: -getY(totalAngle, this.props.earToBridge),\n            label: \"Bridge of nose\"\n        }\n    }\n\n    setNoseTipPoint() {\n        this.nosePoint = {\n            x: getX(this.earToNoseRiseAngle, this.props.earToNose),\n            y: -getY(this.earToNoseRiseAngle, this.props.earToNose),\n            label: \"Tip of nose\"\n        }\n    }\n\n    setChinPoint() {\n        this.chinPoint = {\n            x: this.nosePoint.x - getX(this.noseChinAngle, this.nosePoint.x),\n            y: this.nosePoint.y + getY(this.noseChinAngle, this.props.noseToChin),\n            label: \"Point of chin\"\n        }\n    }\n\n    setThroatPoint() {\n        const earBottomToChinX = this.chinPoint.x - this.earBottom.x;\n        const earBottomToChinY = this.chinPoint.y - this.earBottom.y;\n        const earBottomToChinDistance =\n            Math.sqrt(\n                earBottomToChinX * earBottomToChinX +\n                earBottomToChinY * earBottomToChinY);\n\n        const lowerAngle = getAngleA(\n            this.props.chinToThroat,\n            earBottomToChinDistance,\n            this.props.earToThroat);\n\n        const upperAngle = getAngleA(\n            earBottomToChinY,\n            earBottomToChinX,\n            earBottomToChinDistance);\n\n        const totalAngle = upperAngle + lowerAngle;\n\n        const x = this.earBottom.x + getX(totalAngle, this.props.earToThroat);\n        const y = this.earBottom.y + getY(totalAngle, this.props.earToThroat);\n\n        this.throatPoint = {\n            x: x,\n            y: y,\n            label: \"Throat\"\n        }\n    }\n\n    setTabPoints() {\n        this.tabTop = {\n            x: -this.tabWidth,\n            y: this.earTop.y,\n            label: \"Tab top\"\n        }\n        this.tabBottom = {\n            x: -this.tabWidth,\n            y: this.earBottom.y,\n            label: \"Tab bottom\"\n        }\n    }\n    setDimensions() {\n        this.setEarTop();\n        this.setEarBottom();\n        this.setBridgePoint();\n        this.setNoseTipPoint();\n        this.setChinPoint();\n        this.setThroatPoint();\n        this.setTabPoints()\n    }\n\n    makePoints() {\n        let points = [\n            this.earTop,\n            this.bridgePoint,\n            this.nosePoint,\n            this.chinPoint,\n            this.throatPoint,\n            this.earBottom,\n            this.earTop\n        ];\n        return points;\n    }\n\n    makeTabPoints() {\n        let points = [\n            this.earTop,\n            this.tabTop,\n            this.tabBottom,\n            this.earBottom\n        ]\n        return points;\n    }\n\n    makePolylinePoints(points) {\n        let values = [];\n        points.forEach(element => values.push(element.x, element.y));\n        return values;\n    }\n\n    getLabelPoints() {\n        return [\n            this.earTop,\n            this.tabTop,\n            this.earBottom,\n            this.tabBottom,\n            this.bridgePoint,\n            this.nosePoint,\n            this.chinPoint,\n            this.throatPoint\n        ]\n    }\n\n    render() {\n        this.setDimensions(this.props);\n        const points = this.makePoints()\n        const polylinePoints = this.makePolylinePoints(points);\n\n        const tabPoints = this.makeTabPoints();\n        const tabPolylinePoints = this.makePolylinePoints(tabPoints);\n        return (\n            <>\n                <Col>\n                    <Row>\n                        <Button onClick={this.download}>Download pattern</Button>\n                    </Row>\n                    <Row>\n                        <Col fluid>\n                        <svg\n                            width='300mm'\n                            height='300mm'\n                            viewBox='-50 -75 250 225'\n                            id='maskPattern'>\n                            <Ruler></Ruler>\n                            <g transform='translate(0, 0)'>\n                                <PatternPolyline points={polylinePoints}>\n                                </PatternPolyline>\n                                <PatternPolyline points={tabPolylinePoints}>\n                                </PatternPolyline>\n                                {this.showLabels &&\n                                    <VertexLabels points={this.getLabelPoints()}></VertexLabels>}\n                            </g>\n                        </svg>\n                        </Col>\n                    </Row>\n                </Col>\n            </>)\n    }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { DimensionInput } from './DimensionInput';\nimport { MaskPattern } from './makePattern';\nimport face_points_lines_labels2 from './face_points_lines_labels2.jpg';\nimport Image from 'react-bootstrap/Image';\n\nclass MyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            noseToChin: 95,\n            earHeight: 45,\n            earToNose: 115,\n            earToThroat: 90,\n            bridgeToTip: 30,\n            earToBridge: 110,\n            chinToThroat: 55\n        }\n        this.handleInputChange =\n            this.handleInputChange.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            [name]: parseInt(target.value)\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <Row fluid=\"true\">\n                    <Form>\n                        <Row>\n                        <Col fluid>\n                    <Image\n                    src={face_points_lines_labels2}\n                    width={500}\n                    height={500}\n                    fluid></Image>\n                </Col>\n                            <Col>\n                                <DimensionInput\n                                    id=\"earToBridge\"\n                                    label=\"Ear top to nose bridge (A to B)\"\n                                    val={this.state.earToBridge}\n                                    onValueChange={this.handleInputChange}>\n                                </DimensionInput>\n                                <DimensionInput\n                                    id=\"earToNose\"\n                                    label=\"Ear top to nose tip (A to C)\"\n                                    val={this.state.earToNose}\n                                    onValueChange={this.handleInputChange}>\n                                </DimensionInput>\n                                <DimensionInput\n                                    id=\"bridgeToTip\"\n                                    label=\"Nose bridge to nose tip (B to C)\"\n                                    val={this.state.bridgeToTip}\n                                    onValueChange={this.handleInputChange}>\n                                </DimensionInput>\n                                <DimensionInput\n                                    id=\"noseToChin\"\n                                    label=\"Nose to chin with mouth open to talk (C to D)\"\n                                    val={this.state.noseToChin}\n                                    onValueChange={this.handleInputChange}>\n                                </DimensionInput>\n                            </Col>\n                            <Col>\n                                <DimensionInput\n                                    id=\"chinToThroat\"\n                                    label=\"Chin to throat (D to E)\"\n                                    val={this.state.chinToThroat}\n                                    onValueChange={this.handleInputChange}>\n                                </DimensionInput>\n                                <DimensionInput\n                                    id=\"earToThroat\"\n                                    label=\"Throat to ear bottom (E to F)\"\n                                    val={this.state.earToThroat}\n                                    onValueChange={this.handleInputChange}>\n                                </DimensionInput>\n                                <DimensionInput\n                                    id=\"earHeight\"\n                                    label=\"Ear height (A to F)\"\n                                    val={this.state.earHeight}\n                                    onValueChange={this.handleInputChange}>\n                                </DimensionInput>\n\n\n                            </Col>\n                        </Row>\n                    </Form>\n                </Row>\n                <Row>\n                    <MaskPattern\n                        noseToChin={this.state.noseToChin}\n                        earHeight={this.state.earHeight}\n                        earToNose={this.state.earToNose}\n                        earToThroat={this.state.earToThroat}\n                        bridgeToTip={this.state.bridgeToTip}\n                        earToBridge={this.state.earToBridge}\n                        chinToThroat={this.state.chinToThroat}\n                    >\n                    </MaskPattern>\n                </Row>\n            </>\n        )\n    }\n};\nexport default MyForm;\n","import React from 'react';\n\nexport class SewingInstructions extends React.Component {\n    render() {\n        return (\n            <>\n            <p>Images will be here soon! Until then, here are text-only instructions. All seams use a 1/4\" (6mm) seam allowance.</p>\n            <p>\n                Measure your face and use the Create Pattern tab to create and download your pattern.\n            </p>\n            <p>\n                Open your pattern with a browser and print it.\n            </p>\n            <p>\n                Use a ruler to check that the line at the top left is 5 cm long. \n            </p>\n            <p>\n                If it's the wrong length, adjust your print settings until the line is the correct length.\n            </p>\n            <h2>\n                Cut your pattern and fabric\n            </h2>\n            <p>\n                Cut your paper pattern out, including the tab to the left of the ear.\n            </p>\n            <p>\n                Fold your fabric in half and place the tip-of-nose to point-of-chin line on the fold.\n            </p>\n            <p>\n                Cut two pieces on fold. (Optionally, cut one piece from a liner fabric for the inside, and one pieces from a showy fabric for the outside).\n            </p>\n            <p>\n                Fold each piece along the tip-of-nose to point-of-chin line, right sides together.\n            </p>\n            <p>\n                On each piece, sew from the bridge of the nose to the tip of the nose and fron the point of the chin to the throat, using a 1/4\" (6mm) seam allowance.\n            </p>\n            <p>\n                On each piece, clip the corners at the tip of nose and point of chin, then press the seams open.\n                </p>\n                <p>\n                    Place the two pieces against each other, right sides touching.\n                </p>\n                <p>\n                    Sew the top and bottom edges with a 1/4\" (6mm) seam allowance.\n                </p>\n                <p>\n                    Flip the mask inside out and press.\n                </p>\n                <p>\n                    Edgestitch along the top and bottom edges.\n                </p>\n                <h2>\n                    Add a nose bridge\n                </h2>\n                <p>\n                    Cut out an 8cm piece of ribbon or bias tape. It should be about 1 cm wide and 8cm long, but the exact dimensions are not important.\n                </p>\n                <p>\n                    Center your ribbon or tape at the center point of the mask on the top edge, on the inside of the mask.\n                </p>\n                <p>\n                    Sew your ribbon or tape in place along the long top and bottom edges, leaving the left and right edges open.\n                </p>\n                <p>\n                    Insert a piece of wire (e.g. a paperclip) into the ribbon.\n                </p>\n                <p>\n                    Hold the mask up to your face and pinch the wire against the bridge of your nose to form it to the shape of your nose.\n                </p>\n                <h2>\n                    Form the tunnels that will hold the straps\n                </h2>\n                <p>\n                    On the left side of the mask, fold in 1/4\" (6mm) of fabric toward the inside of the mask and press.\n                </p>\n                <p>\n                    Fold again, bringing the edge to the line between the ear top and ear bottom, and press.\n                </p>\n                <p>\n                    Sew the flap in place, creating a tunnel for the strap.\n                </p>\n                <p>\n                    Repeat for the right side.\n                </p>\n                <h2>\n                    Add straps\n                </h2>\n                <p>\n                    For an ear-loop strap, use the string to measure the length around the back of your ear from the top to the bottom (points A to F, around the back of the ear).\n                </p>\n                <p>\n                    Cut two pieces of elastic of the measured length.\n                </p>\n                <p>\n                    Stuff one end of the elastic into the top of the left tunnel, and the other end into the bottom of the left tunnel.\n                </p>\n                <p>\n                    Sew in place.\n                </p>\n                <p>\n                    Repeat for the right side.\n                </p>\n                <p>\n                    For an over-the head strap, use the string to measure the length from the top of your left ear to the top of your right ear, going up almost to the crown of your head.\n                </p>\n                <p>\n                    Cut a piece of elastic of the correct size, and sew it from the top of the left tunnel to the top of the right tunnel.\n                </p>\n                <p>\n                    Use the string to measure the length from the bottom of your left ear to the bottom of your right ear, going around the back of your neck.\n                </p>\n                <p>\n                    Cut a piece of elastic of the correct size, and sew it from the bottom of the left tunnel to the bottom of the right tunnel.\n                </p>\n                <p>\n                    There are many other ways to set up your straps, including a single strap that runs through the tunnels and is adjusted with a toggle or by tying it when you put the mask on.\n                </p>\n            </>)\n    }\n}\n\n","import React from 'react';\nimport Figure from 'react-bootstrap/Figure';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nexport class MeasurementFigure extends React.Component {\n    render() {\n        return (\n            <ListGroup.Item justify='center'>\n            <Figure>\n                <Figure.Image\n                    src={this.props.imgSrc}\n                    width={500}\n                    height={500}\n                    fluid></Figure.Image>\n                <Figure.Caption>{this.props.caption}</Figure.Caption>\n            </Figure>\n            </ListGroup.Item>)\n    }\n}\n\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nexport class ItemDescription extends React.Component {\n    render() {\n        return (\n            <ListGroup horizontal>\n            <ListGroup.Item>{this.props.itemName}</ListGroup.Item>\n            <ListGroup.Item>{this.props.description}</ListGroup.Item>\n            </ListGroup>)\n    }\n}\n\n","import React from 'react';\nimport face_points_labels_2 from './face_points_labels_2.jpg';\nimport face_points_lines_labels2 from './face_points_lines_labels2.jpg';\nimport face_points_lines2 from './face_points_lines2.jpg';\n\nimport { MeasurementFigure } from './MeasurementFigure';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Container from 'react-bootstrap/Container';\nimport { ItemDescription } from './ItemDescription';\n\nexport class MeasurementInstructions extends React.Component {\n    render() {\n        return (\n            <>\n                <Container>\n                    <ListGroup variant='flush'>\n                        <MeasurementFigure\n                            imgSrc={face_points_labels_2}\n                            caption='To size your mask you will measure the distances between a few points on your face.'>\n                        </MeasurementFigure>\n                        <ItemDescription\n                            itemName='A'\n                            description='The top of your ear'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='B'\n                            description='The bridge of your nose'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='C'\n                            description='The tip of your nose'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='D'\n                            description='The point of your chin'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='E'\n                            description='The top of your throat. The mask will hook under your chin and back to this point, to keep it snug when you are talking'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='F'\n                            description='The bottom of your ear, just above the end of your jawbone'>\n                        </ItemDescription>\n                        <MeasurementFigure\n                            imgSrc={face_points_lines2}\n                            caption='This image shows the lines you will measure.'>\n                        </MeasurementFigure>\n                        <ListGroup.Item>To make these measurements, you need a string and a ruler.</ListGroup.Item>\n                        <ListGroup.Item>Start by cutting a piece of string about six inches long and tying a knot at one end.</ListGroup.Item>\n                        <ListGroup.Item>To measure a single line, place the knot at the start point on your face and hold it in place with a finger.</ListGroup.Item>\n                        <ListGroup.Item>Use your other hand to pull the string to the end point.</ListGroup.Item>\n                        <ListGroup.Item>Mark the end point by pinching the string with your fingers.</ListGroup.Item>\n                        <ListGroup.Item>Keeping the end point pinched, lay the string along the ruler to measure the length from the knot to the end point.</ListGroup.Item>\n                        <MeasurementFigure\n                            imgSrc={face_points_lines_labels2}\n                            caption='This image shows the lines that you will measure, along with the labeled points.'>\n                        </MeasurementFigure>\n                        <ItemDescription\n                            itemName='A to B'\n                            description='The top of your ear to the bridge of your nose, following your cheekbone.'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='A to C'\n                            description='The top of your ear to the point of your nose.'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='B to C'\n                            description='The bridge of your nose to the point of your nose.'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='C to D'\n                            description='The point of your nose to the tip of your chin. Measure this with your mouth open, as though you were talking.'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='D to E'\n                            description='The point of your chin to the front of your throat. The mask will hook under your chin back to this point, to keep it snug when you are talking.'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='E to F'\n                            description='The front of your throat to the bottom of your ear.'>\n                        </ItemDescription>\n                        <ItemDescription\n                            itemName='A to F'\n                            description='The top of your ear to the bottom of your ear.'>\n                        </ItemDescription>\n                    </ListGroup>\n                </Container>\n            </>)\n    }\n}\n\n","\nimport React from 'react';\nimport Jumbotron from 'react-bootstrap/Figure';\nimport face_mask_earloop from './face_mask_earloop.jpg';\nimport face_mask_laces from './face_mask_laces.jpg';\n\nexport class Introduction extends React.Component {\n    render() {\n        return (\n            <Jumbotron>\n                <h1>Custom Mask Pattern Generator</h1>\n                <p>\n                    This is v1 of a utility for generating sewing patterns for custom masks, based on the dimensions of your face.\n  </p>\n                <p>\n                    Use the tabs at the top of the page to navigate.\n  </p>\n                <p>Made by Rachel Fenichel in July 2020.</p>\n\n                <img\n                    src={face_mask_earloop}\n                    height='500'\n                    alt='Our model wearing a face mask with elastic earloops.'>\n                </img>\n                <img\n                    src={face_mask_laces}\n                    height='500'\n                    alt='Our model wearing a face mask with laces behind the neck and over the top of the head.'>\n                </img>\n                <p>\n                    Have a suggestion? Want to fix my css? File an issue or make a pull request against <a href=\"https://github.com/fenichel/mask-pattern-generator/issues\">my GitHub repo</a>.\n                </p>\n            </Jumbotron>)\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport MyForm from './Form.js';\nimport { SewingInstructions } from './SewingInstructions';\nimport { MeasurementInstructions } from './MeasurementInstructions';\nimport { Introduction } from './Introduction';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs\n        defaultActiveKey=\"introduction\"\n        transition={false}>\n          <Tab eventKey=\"introduction\" title=\"Introduction\">\n            <Introduction></Introduction>\n          </Tab>\n        <Tab eventKey=\"measuring\" title=\"Measurement instructions\">\n\n          <MeasurementInstructions></MeasurementInstructions>\n        </Tab>\n        <Tab eventKey=\"createPattern\" title=\"Create Pattern\">\n          <Container>\n            <MyForm></MyForm>\n          </Container>    </Tab>\n        <Tab eventKey=\"sewing\" title=\"Sewing instructions\">\n          <SewingInstructions></SewingInstructions>\n        </Tab>\n      </Tabs>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}